# Generated by Django 5.2.5 on 2025-09-11 22:01

import accounts.models
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='phone number')),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('vendor', 'Vendor'), ('admin', 'Admin'), ('superadmin', 'Super Admin')], default='customer', max_length=20)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('bio', models.TextField(blank=True)),
                ('street_address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('loyalty_points', models.IntegerField(default=0)),
                ('preferred_currency', models.CharField(default='USD', max_length=3)),
                ('language_preference', models.CharField(default='en', max_length=10)),
                ('is_verified', models.BooleanField(default=False, verbose_name='Email Verified')),
                ('verification_code', models.CharField(blank=True, max_length=6, null=True, verbose_name='Verification Code')),
                ('verification_code_created', models.DateTimeField(blank=True, null=True, verbose_name='Verification Code Created')),
                ('reset_code', models.CharField(blank=True, max_length=6, null=True, verbose_name='Reset Code')),
                ('reset_code_created', models.DateTimeField(blank=True, null=True, verbose_name='Reset Code Created')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'indexes': [models.Index(fields=['email'], name='accounts_us_email_74c8d6_idx'), models.Index(fields=['username'], name='accounts_us_usernam_c0ea66_idx'), models.Index(fields=['role'], name='accounts_us_role_1fa9a5_idx')],
            },
            managers=[
                ('objects', accounts.models.UserManager()),
            ],
        ),
    ]
